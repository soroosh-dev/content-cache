worker_processes 1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    lua_package_path "/home/soroosh/content-cache/lua/?.lua;;";
    
    lua_capture_error_log 32m;
    lua_shared_dict filename_dict 1m;
    lua_shared_dict file_dict 1m;

    server {
        listen       80;
        server_name  localhost;


        location /favicon.ico {
            access_log off;
            log_not_found off;
        }

        location /static/ {
		root /home/soroosh/content-cache/ccache/;
	    }

        location /health-check/ {
            default_type application/json;
            content_by_lua_block {
                local json = require "cjson"
                ngx.say(json.encode({['status']=true}))
            }
        }
        
        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://unix:/run/gunicorn.sock;

            header_filter_by_lua_block {
                ngx.header['parspack'] = 'HR_Code_Challenge'
            }

            access_by_lua_block {
                ngx.ctx.request_id = ngx.var.request_id
            }

            log_by_lua_block {
                if (ngx.var.request_uri == '/storage/' or ngx.var.request_uril == '/storage') and ngx.var.request_method == 'POST' then
                    local file = ngx.shared.file_dict:get("log_file")
                    if not file then
                        file = io.open("/tmp/file_add.log", "a")
                        ngx.shared.file_dict:set("log_file", file)
                    end
                    local filename = ngx.shared.filename_dict:get(ngx.ctx.request_id)
                    ngx.shared.filename_dict:delete(ngx.ctx.request_id)
                    if not filename then
                        filename = "NO FILE UPLOADED"
                    end
                    file:write(string.format("%s - Request body size: %s - Response body size: %s - Filename: %s - Token: %s \n", ngx.localtime(), ngx.var.request_length, ngx.var.bytes_sent, filename, ngx.req.get_headers()['Authorization']))
                    file:flush()
                end
            }

            body_filter_by_lua_block {
                local response_extraction = require "response_extraction"
                response_extraction.get_filename(ngx.arg[1])
            }

        }

    }
}

